{
  "Modules": {

    "ALPR-RKNN": {
      "Name": "License Plate Reader (RKNN)",
      "Version": "1.1.0",

      // Publishing info
      "Description": "Detects and readers single-line and multi-line licence plates. This module only works with Rockchip RK3588/RK3588S NPUs like the Orange Pi 5/5B/5 Plus.",
      "Category": "Computer Vision",
      "Platforms": [ "orangepi" ],
      "License": "SSPL",
      "LicenseUrl": "https://www.mongodb.com/licensing/server-side-public-license",
      "Author": "Mike Lud",
      "Homepage": null,
      "BasedOn": null,
      "BasedOnUrl": null,

      // Launch instructions
      "AutoStart": true,
      "FilePath": "ALPR_adapter.py",
      "Runtime": "python3.9",
      "RuntimeLocation": "Local",     // Can be Local or Shared
      "Queue": "alpr_queue",          // default is lower(module_id) + '_queue'

      "EnvironmentVariables": {
        "PLATE_CONFIDENCE": 0.5,      // Confidence required in detecting a plate in the first place
        "PLATE_ROTATE_DEG": 0,        // If non-zero, rotate plate before OCR (+ve = counterclockwise)
        "AUTO_PLATE_ROTATE": true,
        "PLATE_RESCALE_FACTOR": 2,
        "OCR_OPTIMIZATION": true,
        "OCR_OPTIMAL_CHARACTER_HEIGHT": 60,
        "OCR_OPTIMAL_CHARACTER_WIDTH": 36
      },

      // These are all optional. Defaults are usually fine
      "InstallGPU": true,
      "EnableGPU": true,              // Will be coerced to false if InstallGPU = false
      "AcceleratorDeviceName": null,  // = default
      "Parallelism": 1,               // 0 = Default (number of CPUs - 1)
      "HalfPrecision": "enable",      // 'Force', 'Enable', 'Disable': whether to force on, allow, or disable half-precision ops
      "PostStartPauseSecs": 1,        // Generally 1 if using GPU, 0 for CPU
      
      // Which server version is compatible with each version of this module.
      "ModuleReleases": [
        { "ModuleVersion": "1.0.1", "ServerVersionRange": [ "2.3.1", "2.4.0" ], "ReleaseDate": "2023-11-06", "ReleaseNotes": "Updated to match new installer SDK." },
        { "ModuleVersion": "1.0.2", "ServerVersionRange": [ "2.4.1", "2.4.1" ], "ReleaseDate": "2023-12-06", "ReleaseNotes": "Updated modulesettings schema, new route"},
        { "ModuleVersion": "1.0.3", "ServerVersionRange": [ "2.4.2", ""      ], "ReleaseDate": "2023-12-09", "ReleaseNotes": "Installer updates", "Importance": "Minor" },
        { "ModuleVersion": "1.1.0", "ServerVersionRange": [ "2.5.0", ""      ], "ReleaseDate": "2024-01-06", "ReleaseNotes": "Additions for dynamic explorer UI" }
      ],

      "RouteMaps": [
        {
          "Name": "License Plate Reader RKNN",
          "Route": "vision/alpr",
          "Method": "POST",
          "Command": "alpr",
          "Description": "Detects the characters in license plates detected within an image",
          "Inputs": [
            {
              "Name": "upload",
              "Type": "File",
              "Description": "The image to ALPR."
            }
          ],
          "Outputs": [
            {
              "Name": "success",
              "Type": "Boolean",
              "Description": "True if successful."
            },
            {
              "Name": "message",
              "Type": "String",
              "Description": "A summary of the inference operation."
            },
            {
              "Name": "error",
              "Type": "String",
              "Description": "(Optional) An description of the error if success was false."
            },
            {
              "Name": "predictions",
              "Type": "Object[]",
              "Description": "An array of objects with the x_max, x_min, max, y_min bounds of the plate, label, the plate chars and confidence."
            },
            {
              "Name": "count",
              "Type": "Integer",
              "Description": "The number of objects found."
            },
            {
              "Name": "inferenceMs",
              "Type": "Integer",
              "Description": "The time (ms) to perform the AI inference."
            },
            {
              "Name": "processMs",
              "Type": "Integer",
              "Description": "The time (ms) to process the image (includes inference and image manipulation operations)."
            }
          ]
        },

        {
          "Name": "License Plate Reader RKNN, legacy route",
          "Route": "image/alpr",
          "Method": "POST",
          "Command": "alpr",
          "Description": "Detects the characters in license plates detected within an image",
          "Inputs": [
            {
              "Name": "upload",
              "Type": "File",
              "Description": "The image to ALPR."
            }
          ],
          "Outputs": [
            {
              "Name": "success",
              "Type": "Boolean",
              "Description": "True if successful."
            },
            {
              "Name": "message",
              "Type": "String",
              "Description": "A summary of the inference operation."
            },
            {
              "Name": "error",
              "Type": "String",
              "Description": "(Optional) An description of the error if success was false."
            },
            {
              "Name": "predictions",
              "Type": "Object[]",
              "Description": "An array of objects with the x_max, x_min, max, y_min bounds of the plate, label, the plate chars and confidence."
            },
            {
              "Name": "count",
              "Type": "Integer",
              "Description": "The number of objects found."
            },
            {
              "Name": "inferenceMs",
              "Type": "Integer",
              "Description": "The time (ms) to perform the AI inference."
            },
            {
              "Name": "processMs",
              "Type": "Integer",
              "Description": "The time (ms) to process the image (includes inference and image manipulation operations)."
            }
          ]
        }
      ]
    }
  }
}
